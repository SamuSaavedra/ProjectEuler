# Problem 2: Even Fibonacci Numbers.
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def fibonacci_sequence(maximum):
    """Creates the Fibonacci sequence until a maximum

    Args:
        maximum (int): Number limit which no value in the list will exceed

    Returns:
        list: List of the Fibonacci sequence until maximum
    """

    a = 1
    b = 2
    fibonacci_list = []
    while b < maximum:
        fibonacci_list.append(b)
        a, b = b, a + b
    return fibonacci_list

def return_even(list):
    """Turns a list of natural numbers in other but only with even numbers of that list

    Args:
        list (list): List of natural numbers

    Returns:
        list: Even numbers of the provided list 
    """

    for i in list[:]:  # Iterates over the original list, without "[:]" this loop doesn't work well
        if i % 2 == 1:
            list.remove(i)
    return list

MAXIMUM = 4_000_000
print(sum(return_even(fibonacci_sequence(MAXIMUM))))